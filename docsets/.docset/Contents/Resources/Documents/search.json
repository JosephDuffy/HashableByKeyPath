{"Protocols/HashableKeyPathConsumer.html#/s:17HashableByKeyPath0acD8ConsumerP4RootQa":{"name":"Root","abstract":"<p>The type of the object that will be hashed.</p>","parent_name":"HashableKeyPathConsumer"},"Protocols/HashableKeyPathConsumer.html#/s:17HashableByKeyPath0acD8ConsumerP03addacD0yys0cD0Cy4RootQzqd__GSHRd__lF":{"name":"addHashableKeyPath(_:)","abstract":"<p>Add the provided key path to the collection of key paths that will be used to calculate the hash of an instance of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/HashableKeyPathConsumer.html#/s:17HashableByKeyPath0acD8ConsumerP4RootQa\">Root</a></code>.</p>","parent_name":"HashableKeyPathConsumer"},"Protocols/HashableByKeyPath.html#/s:17HashableByKeyPathAAP03addaC5Paths2toyqd__z_t4RootQyd__RszAA0acD8ConsumerRd__lF":{"name":"addHashableKeyPaths(to:)","abstract":"<p>Add key paths to <code>consumer</code> that will be used for <code>Hashable</code> conformance.</p>","parent_name":"HashableByKeyPath"},"Protocols/HashableByKeyPath.html#/s:17HashableByKeyPath09EquatablebcD0P03addeC5Paths2toyqd__z_t4RootQyd__RszAA0ecD8ConsumerRd__lF":{"name":"addEquatableKeyPaths(to:)","parent_name":"HashableByKeyPath"},"Protocols/HashableByKeyPath.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"HashableByKeyPath"},"Protocols/EquatableKeyPathConsumer.html#/s:17HashableByKeyPath09EquatablecD8ConsumerP4RootQa":{"name":"Root","abstract":"<p>The root type of the object that will be equated.</p>","parent_name":"EquatableKeyPathConsumer"},"Protocols/EquatableKeyPathConsumer.html#/s:17HashableByKeyPath09EquatablecD8ConsumerP03addecD0yys0cD0Cy4RootQzqd__GSQRd__lF":{"name":"addEquatableKeyPath(_:)","abstract":"<p>Add the provided key path to the collection of key paths that will be used to equate 2 instances of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/EquatableKeyPathConsumer.html#/s:17HashableByKeyPath09EquatablecD8ConsumerP4RootQa\">Root</a></code>.</p>","parent_name":"EquatableKeyPathConsumer"},"Protocols/EquatableByKeyPath.html#/s:17HashableByKeyPath09EquatablebcD0P03addeC5Paths2toyqd__z_t4RootQyd__RszAA0ecD8ConsumerRd__lF":{"name":"addEquatableKeyPaths(to:)","abstract":"<p>Add key paths to <code>consumer</code> that will be used for <code>Equatable</code> conformance.</p>","parent_name":"EquatableByKeyPath"},"Protocols/EquatableByKeyPath.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"EquatableByKeyPath"},"Protocols/EquatableByKeyPath.html":{"name":"EquatableByKeyPath","abstract":"<p>A protocol that defines a single function that can be used to synthesise <code>Equatable</code> conformance.</p>"},"Protocols/EquatableKeyPathConsumer.html":{"name":"EquatableKeyPathConsumer","abstract":"<p>A protocol that defines a function that can be used to add key paths from the <code>Root</code> type to <code>Equatable</code> properties.</p>"},"Protocols/HashableByKeyPath.html":{"name":"HashableByKeyPath","abstract":"<p>A protocol that defines a single function that can be used to synthesise <code>Equatable</code> and <code>Hashable</code> conformance.</p>"},"Protocols/HashableKeyPathConsumer.html":{"name":"HashableKeyPathConsumer","abstract":"<p>A protocol that defines a function that can be used to add key paths from the <code>Root</code> type to <code>Hashable</code> properties.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}