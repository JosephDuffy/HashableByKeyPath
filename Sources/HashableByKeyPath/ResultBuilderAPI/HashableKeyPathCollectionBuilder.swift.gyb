% import string
// This file is generated. Do not edit it.
#if swift(>=5.4)
/// A result builder used to build `HashableKeyPathCollection` values.
@resultBuilder
public final class HashableKeyPathCollectionBuilder<Root> {
%     # 16 is arbitrary, but there has to be a limit somewhere
%     parameterCountList = range(16)
%     for parameterCount in parameterCountList:
%         parametersRange = range(parameterCount + 1)
    /// Build a `HashableKeyPathCollection` with the provided key paths.
    ///
%         for characterIndex in parametersRange:
%             isLast = characterIndex == parametersRange[-1]
%             character = string.ascii_uppercase[characterIndex]
    /// - parameter keyPath${character}: A `Hashable` key path to add to the `HashableKeyPathCollection`.
%         end
    /// - returns: The built `HashableKeyPathCollection`.
    static func buildBlock<
%         for characterIndex in parametersRange:
%             isLast = characterIndex == parametersRange[-1]
%             character = string.ascii_uppercase[characterIndex]
%             if isLast:
        Value${character}: Hashable
%             else:
        Value${character}: Hashable,
%             end
%         end
    >(
%         for characterIndex in parametersRange:
%             character = string.ascii_uppercase[characterIndex]
%             isLast = characterIndex == parametersRange[-1]
%             if isLast:
        _ keyPath${character}: KeyPath<Root, Value${character}>
%             else:
        _ keyPath${character}: KeyPath<Root, Value${character}>,
%             end
%         end
    ) -> HashableKeyPathCollection<Root> {
        var collection = HashableKeyPathCollection<Root>()
%         for characterIndex in parametersRange:
%             character = string.ascii_uppercase[characterIndex]
        collection.addHashableKeyPath(keyPath${character})
%         end
        return collection
    }
%         if parameterCount != parameterCountList[-1]:

%         end
%     end
}
#elseif swift(>=5.1)
/// A function builder used to build `HashableKeyPathCollection` values.
@_functionBuilder
public final class HashableKeyPathCollectionBuilder<Root> {
%     # 16 is arbitrary, but there has to be a limit somewhere
%     parameterCountList = range(16)
%     for parameterCount in parameterCountList:
%         parametersRange = range(parameterCount + 1)
    /// Build a `HashableKeyPathCollection` with the provided key paths.
    ///
%         for characterIndex in parametersRange:
%             isLast = characterIndex == parametersRange[-1]
%             character = string.ascii_uppercase[characterIndex]
    /// - parameter keyPath${character}: A `Hashable` key path to add to the `HashableKeyPathCollection`.
%         end
    /// - returns: The built `HashableKeyPathCollection`.
    static func buildBlock<
%         for characterIndex in parametersRange:
%             isLast = characterIndex == parametersRange[-1]
%             character = string.ascii_uppercase[characterIndex]
%             if isLast:
        Value${character}: Hashable
%             else:
        Value${character}: Hashable,
%             end
%         end
    >(
%         for characterIndex in parametersRange:
%             character = string.ascii_uppercase[characterIndex]
%             isLast = characterIndex == parametersRange[-1]
%             if isLast:
        _ keyPath${character}: KeyPath<Root, Value${character}>
%             else:
        _ keyPath${character}: KeyPath<Root, Value${character}>,
%             end
%         end
    ) -> HashableKeyPathCollection<Root> {
        var collection = HashableKeyPathCollection<Root>()
%         for characterIndex in parametersRange:
%             character = string.ascii_uppercase[characterIndex]
        collection.addHashableKeyPath(keyPath${character})
%         end
        return collection
    }
%         if parameterCount != parameterCountList[-1]:

%         end
%     end
}
#endif
